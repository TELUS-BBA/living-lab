---
# check that the client key is in authorized_keys???
- name: deploys the management server
  hosts: management
  tasks:

    - name: ensure apt packages are present
      become: true
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - git
        - nginx
        - sqlite3
        - python3
        - python3-dev
        - python3-setuptools
        - python3-pip
        - uwsgi
        - uwsgi-plugin-python3

    - name: ensure pip3 packages are present
      become: true
      pip:
        name: "{{ item }}"
        executable: pip3
      loop:
        - django
        - djangorestframework
        - markdown
        - django-filter

    - name: clone living-lab-server github repo
      git:
        repo: https://github.com/adamkpickering/living-lab-server.git
        dest: /home/adam/management/
        force: true

    - name: ensure logs directory exists
      file:
        path: /home/adam/management/logs/
        state: directory

    - name: link between uwsgi.service and /etc/systemd/system/uwsgi.service
      become: true
      file:
        state: link
        src: /home/adam/management/uwsgi.service
        dest: /etc/systemd/system/uwsgi.service

    - name: enable and start uwsgi
      become: true
      systemd:
        name: uwsgi
        enabled: true
        state: restarted
        daemon_reload: yes

    - name: link between nginx-app.conf and /etc/nginx/sites-enabled/default
      become: true
      file:
        state: link
        src: /home/adam/management/nginx-app.conf
        dest: /etc/nginx/sites-enabled/default

    - name: enable and start nginx
      become: true
      systemd:
        name: nginx
        enabled: true
        state: restarted

    - name: run django's makemigrations
      django_manage:
        command: makemigrations
        app_path: /home/adam/management/app/

    - name: run django's migrate
      django_manage:
        command: migrate
        app_path: /home/adam/management/app/

    - name: run django's collectstatic
      django_manage:
        command: collectstatic
        app_path: /home/adam/management/app/

    - name: check if django superuser exists
      shell: echo "import sys; from django.contrib.auth.models import User; sys.exit(0 if User.objects.filter(username='admin').count() > 0 else 1)" | /home/adam/management/app/manage.py shell
      register: checksuperuser
      ignore_errors: true
      changed_when: false

    - name: create a django superuser
      shell: echo "from django.contrib.auth.models import User; User.objects.create_superuser('admin', 'admin@example.com', 'admin')" | /home/adam/management/app/manage.py shell
      when: checksuperuser.rc != 0
