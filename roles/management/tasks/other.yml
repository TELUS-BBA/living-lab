---
- name: ensure management directory exists
  file:
    path: /home/{{ ansible_user }}/management/
    state: directory

- name: put config files in place
  template:
    src: "{{ item }}"
    dest: /home/{{ ansible_user }}/management/{{ item }}
  loop:
    - uwsgi.ini
    - uwsgi_params

- name: get local copy of living-lab-api repo
  run_once: true
  local_action:
    module: git
    repo: https://github.com/adamkpickering/living-lab-api.git
    dest: tmp/
    force: true

- name: get local copy of living-lab-api repo
  local_action:
    module: git
    repo: https://github.com/adamkpickering/living-lab-api.git
    dest: tmp/
    force: true

- name: synchronize django project with management directory
  synchronize:
    src: tmp/
    dest: /home/{{ ansible_user }}/management/app/

- name: delete tmp/ from local system
  run_once: true
  local_action:
    module: file
    path: tmp/
    state: absent

- name: ensure we have DEBUG = False in settings.py
  lineinfile:
    path: /home/{{ ansible_user }}/management/app/livinglabserver/settings.py
    regexp: "^DEBUG = "
    line: "DEBUG = False"

- name: ensure logs directory exists
  file:
    path: /home/{{ ansible_user }}/management/logs/
    state: directory

  #- name: run django's makemigrations
  #  django_manage:
  #    command: makemigrations
  #    app_path: /home/{{ ansible_user }}/management/app/
  #
  #- name: run django's migrate
  #  django_manage:
  #    command: migrate
  #    app_path: /home/{{ ansible_user }}/management/app/

- name: run django's collectstatic
  django_manage:
    command: collectstatic
    app_path: /home/{{ ansible_user }}/management/app/

  #- name: check if django superuser exists
  #  shell: echo "import sys; from django.contrib.auth.models import User; sys.exit(0 if User.objects.filter(username='admin').count() > 0 else 1)" | /home/{{ ansible_user }}/management/app/manage.py shell
  #  register: checksuperuser
  #  ignore_errors: true
  #  changed_when: false
  #
  #- name: create a django superuser
  #  shell: echo "from django.contrib.auth.models import User; User.objects.create_superuser('admin', 'admin@example.com', 'admin')" | /home/{{ ansible_user }}/management/app/manage.py shell
  #  when: checksuperuser.rc != 0

- name: copy uwsgi.service into place
  become: true
  template:
    src: uwsgi.service
    dest: /etc/systemd/system/uwsgi.service

- name: enable and start uwsgi
  become: true
  systemd:
    name: uwsgi
    enabled: true
    state: restarted
    daemon_reload: yes

- name: copy nginx-app.conf into place
  become: true
  template:
    src: nginx-app.conf
    dest: /etc/nginx/sites-enabled/default

- name: enable and start nginx
  become: true
  systemd:
    name: nginx
    enabled: true
    state: restarted
    daemon_reload: yes

- name: put the client key in authorized_keys
  copy:
    src: /home/adam/.ssh/id_rsa.pub
    dest: /home/{{ ansible_user }}/.ssh/authorized_keys
    mode: 0600

- name: ensure line "ClientAliveInterval 4" is in sshd_config
  become: true
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: "^ClientAliveInterval "
    line: "ClientAliveInterval 4"

- name: restart sshd
  become: true
  systemd:
    name: sshd
    enabled: true
    state: restarted
    daemon_reload: yes
